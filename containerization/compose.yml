services:
  postgres:
    image: postgres:18-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak-network

  keycloak:
    image: keycloak/keycloak:26.4
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HOSTNAME: localhost
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    entrypoint: ["/opt/keycloak/keycloak-init.sh"]
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'" ]
      interval: 30s
      timeout: 5s
      retries: 20
    ports:
      - "${KEYCLOAK_PORT}:8080"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./keycloak-realm/:/opt/keycloak/data/import/
      - ./keycloak-init.sh:/opt/keycloak/keycloak-init.sh:ro
    networks:
      - keycloak-network

volumes:
  postgres_data:
    # set name direct to prevent using default '<foldername>_keycloak-network'
    name: keycloak_postgres_data

networks:
  keycloak-network:
    # set name direct to prevent using default '<foldername>_keycloak-network'
    name: keycloak-network

